name: Full Stack CI/CD - CarShop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.set-backend-image.outputs.img }}
      frontend_image: ${{ steps.set-frontend-image.outputs.img }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # ========== INSTALL DEPENDENCIES ==========
      - name: Install backend deps
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Install frontend deps
        run: |
          cd frontend
          npm ci

      # ========== LINTING & STYLE ==========
      - name: Run backend lint (flake8)
        run: |
          cd backend
          flake8 || true   # Allow style warnings

      - name: Run frontend lint (eslint)
        run: |
          cd frontend
          npx eslint . || true

      # ========== CODE SECURITY SCANS ==========
      - name: Run Bandit (Python security)
        run: |
          cd backend
          bandit -r . -lll -f json -o bandit-report.json || true

      - name: Run npm audit (frontend)
        run: |
          cd frontend
          npm audit --json > audit.json || true

      # ========== UNIT / INTEGRATION TESTS ==========
      - name: Run backend tests (pytest)
        run: |
          cd backend
          pytest -q

      - name: Run frontend tests (jest)
        run: |
          cd frontend
          npm test -- --watchAll=false --silent

      # ========== FILESYSTEM SCAN (Gitleaks) ==========
      - name: Run gitleaks (file scan)
        uses: zricethezav/gitleaks-action@v1
        with:
          args: detect --source . --redact

      # ========== DOCKER BUILD ==========
      - name: Set image names (backend)
        id: set-backend-image
        run: |
          echo "img=us-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/carshop-backend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set image names (frontend)
        id: set-frontend-image
        run: |
          echo "img=us-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/carshop-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build backend Docker image
        run: |
          docker build -t ${{ steps.set-backend-image.outputs.img }} ./backend

      - name: Build frontend Docker image
        run: |
          docker build -t ${{ steps.set-frontend-image.outputs.img }} ./frontend

      # ========== SCAN DOCKER IMAGE (Trivy) ==========
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m).tar.gz | tar xz
          sudo mv trivy /usr/local/bin/

      - name: Scan backend image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.set-backend-image.outputs.img }} || true

      - name: Scan frontend image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.set-frontend-image.outputs.img }} || true

      # ========== PUSH TO GOOGLE ARTIFACT REGISTRY ==========
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure docker for Artifact Registry
        run: |
          gcloud --quiet auth configure-docker ${REGION}-docker.pkg.dev

      - name: Push backend image
        run: |
          docker push ${{ steps.set-backend-image.outputs.img }}

      - name: Push frontend image
        run: |
          docker push ${{ steps.set-frontend-image.outputs.img }}

      # ========== SIMPLE SUCCESS MESSAGE ==========
      - name: Notify completion
        run: echo "âœ… CI pipeline completed successfully!"

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region ${{ secrets.GCP_REGION }}

      - name: Replace image tags in K8s manifests
        run: |
          sed -i "s|<BACKEND_IMAGE>|${{ needs.ci.outputs.backend_image }}|g" k8s/*.yaml || true
          sed -i "s|<FRONTEND_IMAGE>|${{ needs.ci.outputs.frontend_image }}|g" k8s/*.yaml || true

      - name: Apply K8s manifests
        run: |
          kubectl apply -f k8s/
