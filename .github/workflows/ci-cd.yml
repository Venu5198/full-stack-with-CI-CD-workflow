name: Full Stack CI/CD - CarShop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: asia-south1                    # ✅ Artifact Registry region (confirmed)
  ARTIFACT_REPO: backend-repo            # ✅ Existing repository
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_REGION: us-east1                   # ✅ GKE cluster region (unchanged)

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.set-backend-image.outputs.img }}
      frontend_image: ${{ steps.set-frontend-image.outputs.img }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Install frontend dependencies
        run: |
          if [ -d frontend ] && [ -f frontend/package.json ]; then
            cd frontend
            npm install
          else
            echo "⚠️ No frontend folder or package.json found"
          fi

      - name: Backend lint
        run: cd backend && flake8 || true

      - name: Frontend lint
        run: |
          if [ -d frontend ] && [ -f frontend/package.json ]; then
            cd frontend
            npx eslint . || true
          else
            echo "⚠️ No frontend files to lint"
          fi

      - name: Backend security (Bandit)
        run: cd backend && bandit -r . -lll -f json -o bandit-report.json || true

      - name: Frontend security (npm audit)
        run: |
          if [ -d frontend ] && [ -f frontend/package.json ]; then
            cd frontend
            npm audit --json > audit.json || true
          fi

      - name: Backend tests
        run: cd backend && pytest --maxfail=1 --disable-warnings -q || echo "⚠️ No backend tests found"

      - name: Frontend tests
        run: |
          if [ -d frontend ] && [ -f frontend/package.json ]; then
            cd frontend
            npm test -- --watchAll=false --silent || echo "⚠️ No frontend tests found"
          fi

      - name: Set backend image name
        id: set-backend-image
        run: echo "img=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/carshop-backend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set frontend image name
        id: set-frontend-image
        run: echo "img=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/carshop-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build backend Docker image
        run: docker build -t ${{ steps.set-backend-image.outputs.img }} ./backend

      - name: Build frontend Docker image
        run: |
          if [ -d frontend ]; then
            docker build -t ${{ steps.set-frontend-image.outputs.img }} ./frontend
          else
            echo "⚠️ Skipping frontend build - folder not found"
          fi

      - name: Install Trivy
        run: |
          sudo apt-get update -y && sudo apt-get install -y wget
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y && sudo apt-get install -y trivy

      - name: Trivy scan (backend)
        run: trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ steps.set-backend-image.outputs.img }} || true

      - name: Trivy scan (frontend)
        run: trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ steps.set-frontend-image.outputs.img }} || true

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker for Artifact Registry
        run: gcloud --quiet auth configure-docker asia-south1-docker.pkg.dev

      - name: Push backend image
        run: docker push ${{ steps.set-backend-image.outputs.img }}

      - name: Push frontend image
        run: |
          if [ -d frontend ]; then
            docker push ${{ steps.set-frontend-image.outputs.img }}
          else
            echo "⚠️ Skipping frontend push"
          fi

      - name: Done
        run: echo "✅ CI completed successfully!"

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true

      - name: Get GKE credentials
        run: |
          echo "Connecting to GKE in region ${{ env.GKE_REGION }}..."
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region ${{ env.GKE_REGION }}

      - name: Install GKE Auth Plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Replace image tags
        run: |
          sed -i "s|<BACKEND_IMAGE>|${{ needs.ci.outputs.backend_image }}|g" backend/k8s/*.yaml
          sed -i "s|<FRONTEND_IMAGE>|${{ needs.ci.outputs.frontend_image }}|g" backend/k8s/*.yaml || true

      - name: Deploy to GKE
        run: kubectl apply -f backend/k8s/
